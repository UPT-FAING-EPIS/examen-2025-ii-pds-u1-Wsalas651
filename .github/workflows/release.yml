name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'  # v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET 8.0.x
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Build and Test
      run: |
        dotnet restore examen-2025-ii-pds-u1-Wsalas651.sln
        dotnet build examen-2025-ii-pds-u1-Wsalas651.sln --no-restore --configuration Release
        dotnet test examen-2025-ii-pds-u1-Wsalas651.sln --no-build --configuration Release

    - name: Publish API
      run: dotnet publish src/API/API.csproj --no-build --configuration Release --output ./release/api

    - name: Setup Node.js and Build Frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Build Frontend
      working-directory: src/Frontend
      run: |
        # Verificar si existe package.json
        if [ ! -f "package.json" ]; then
          echo "package.json not found, skipping frontend build"
          mkdir -p ../../release/frontend
          echo "<h1>Frontend not configured</h1>" > ../../release/frontend/index.html
        else
          npm install
          npm run build
          mkdir -p ../../release/frontend
          cp -r build/* ../../release/frontend/
        fi

    - name: Get Version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release Archives
      run: |
        cd release
        zip -r ../event-ticketing-${{ steps.version.outputs.version }}.zip .

    - name: Generate Changelog
      run: |
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        echo "## ðŸš€ Release ${{ steps.version.outputs.version }}" > changelog.md
        echo "" >> changelog.md
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### Changes since $PREVIOUS_TAG:" >> changelog.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges >> changelog.md
        else
          echo "### Initial Release" >> changelog.md
          git log --pretty=format:"- %s" --no-merges >> changelog.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Event Ticketing ${{ steps.version.outputs.version }}
        body_path: changelog.md
        files: event-ticketing-${{ steps.version.outputs.version }}.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Azure
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy API
      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./release/api/