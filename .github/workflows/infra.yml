name: Deploy Infrastructure with Terraform

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    # Login to Azure using OIDC
    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file="terraform.tfvars" -var="postgres_admin_username=${{ secrets.POSTGRES_ADMIN_USERNAME }}" -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: terraform apply -auto-approve -var-file="terraform.tfvars" -var="postgres_admin_username=${{ secrets.POSTGRES_ADMIN_USERNAME }}" -var="postgres_admin_password=${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Export Terraform outputs as GitHub environment variables
    - name: Export Terraform Outputs
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      working-directory: ./terraform
      run: |
        # Verificar que terraform estÃ© inicializado
        if [ ! -f ".terraform/terraform.tfstate" ]; then
          echo "Terraform not initialized, skipping output export"
          exit 0
        fi
        
        # Verificar que existan outputs
        if ! terraform output > /dev/null 2>&1; then
          echo "No terraform outputs available, skipping export"
          exit 0
        fi
        
        # Exportar outputs si existen
        RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name 2>/dev/null || echo "")
        API_URL=$(terraform output -raw api_url 2>/dev/null || echo "")
        FRONTEND_URL=$(terraform output -raw frontend_url 2>/dev/null || echo "")
        POSTGRES_SERVER_NAME=$(terraform output -raw postgres_server_name 2>/dev/null || echo "")
        
        echo "RESOURCE_GROUP_NAME=${RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
        echo "API_URL=${API_URL}" >> $GITHUB_ENV
        echo "FRONTEND_URL=${FRONTEND_URL}" >> $GITHUB_ENV
        echo "POSTGRES_SERVER_NAME=${POSTGRES_SERVER_NAME}" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Update GitHub repository secrets with new infrastructure values
    - name: Update GitHub Secrets
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: gliech/create-github-secret-action@v1
      with:
        name: RESOURCE_GROUP_NAME
        value: ${{ env.RESOURCE_GROUP_NAME }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}

    - name: Update API URL Secret
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: gliech/create-github-secret-action@v1
      with:
        name: API_URL
        value: ${{ env.API_URL }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}

    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}