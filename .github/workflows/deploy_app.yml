name: Deploy Application to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v3

    # Verificación de secretos necesarios
    - name: Check required secrets
      run: |
        if [[ -z "${{ secrets.JWT_SECRET_KEY }}" ]]; then
          echo "Error: JWT_SECRET_KEY is not set"
          exit 1
        fi
        if [[ -z "${{ secrets.SUPABASE_CONNECTION_STRING }}" ]]; then
          echo "Error: SUPABASE_CONNECTION_STRING is not set"
          exit 1
        fi
        if [[ -z "${{ secrets.API_URL }}" ]]; then
          echo "Error: API_URL is not set"
          exit 1
        fi
        echo "All required secrets are set"
      shell: bash

    # Configuración de .NET con caché
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore src/API/API.csproj

    - name: Build
      run: dotnet build src/API/API.csproj --no-restore --configuration Release

    - name: Test
      run: dotnet test tests --no-build --verbosity normal

    # Configuración de Node.js con caché
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/Frontend/package-lock.json

    - name: Install Frontend dependencies
      run: cd src/Frontend && npm ci

    - name: Build Frontend
      run: cd src/Frontend && npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.API_URL }}
        REACT_APP_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        REACT_APP_USE_SUPABASE: ${{ secrets.USE_SUPABASE }}

    - name: Publish .NET App
      run: dotnet publish src/API/API.csproj -c Release -o publish

    # Actualiza los archivos de configuración reemplazando los placeholders con secretos
    - name: Update appsettings.json
      uses: microsoft/variable-substitution@v1
      with:
        files: 'publish/appsettings.json'
      env:
        ConnectionStrings.DefaultConnection: ${{ secrets.SUPABASE_CONNECTION_STRING }}
        Jwt.Key: ${{ secrets.JWT_SECRET_KEY }}

    # Despliegue de la API en Azure Web App
    - name: Deploy API to Azure Web App
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./publish

    # Despliegue del Frontend en Azure Storage
    - name: Login to Azure
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Frontend to Azure Storage
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az storage blob upload-batch --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --auth-mode key --account-key ${{ secrets.STORAGE_ACCOUNT_KEY }} --destination '$web' --source ./src/Frontend/build