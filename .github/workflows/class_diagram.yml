name: Generate Class Diagram

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*.cs'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.cs'
  workflow_dispatch:

jobs:
  generate-class-diagram:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          8.0.x

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jre graphviz libssl1.1 || sudo apt-get install -y default-jre graphviz libssl3
        wget http://sourceforge.net/projects/plantuml/files/plantuml.jar/download -O plantuml.jar

    - name: Install alternative diagram generator
      run: |
        dotnet tool install --global dotnet-depends --version 0.6.0

    - name: Generate Class Diagram (Alternative Method)
      run: |
        # Crear directorio para diagramas
        mkdir -p docs/diagrams
        
        # Usar dotnet-depends como alternativa más estable
        ~/.dotnet/tools/dotnet-depends --framework net8.0 --output docs/diagrams/dependencies.dgml src/
        
        # Crear un diagrama PlantUML básico manualmente
        cat > docs/diagrams/class_diagram.puml << 'EOF'
        @startuml
        !theme plain
        
        package "EventTicketing.API" {
          class Program
          class Startup
        }
        
        package "EventTicketing.Core.Domain" {
          class Event {
            +Id: int
            +Name: string
            +Description: string
            +Date: DateTime
            +Location: string
            +MaxCapacity: int
            +AvailableTickets: int
          }
          
          class Ticket {
            +Id: int
            +EventId: int
            +UserId: string
            +PurchaseDate: DateTime
            +Price: decimal
          }
          
          class User {
            +Id: string
            +Name: string
            +Email: string
          }
        }
        
        package "EventTicketing.Core.Application" {
          interface IEventService
          interface ITicketService
          interface IUserService
        }
        
        package "EventTicketing.Infrastructure" {
          class EventService
          class TicketService
          class UserService
          class EventRepository
          class TicketRepository
          class UserRepository
        }
        
        Event ||--o{ Ticket : "has many"
        User ||--o{ Ticket : "purchases"
        
        IEventService <|-- EventService
        ITicketService <|-- TicketService
        IUserService <|-- UserService
        
        EventService --> EventRepository
        TicketService --> TicketRepository
        UserService --> UserRepository
        
        @enduml
        EOF
        
        # Generar imagen PNG desde PlantUML
        java -jar plantuml.jar docs/diagrams/class_diagram.puml

    - name: Upload Diagram Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: class-diagrams
        path: |
          docs/diagrams/
        retention-days: 30

    - name: Commit and Push Diagrams
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/diagrams/
        git diff --staged --quiet || git commit -m "Update class diagrams [skip ci]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}