name: Generate Class Diagram

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**/*.cs'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**/*.cs'
  workflow_dispatch:

jobs:
  generate-class-diagram:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          5.0.x
          6.0.x
          8.0.x

    - name: Install .NET tools
      run: |
        dotnet tool install --global PlantUmlClassDiagramGenerator --version 1.2.4

    - name: Install PlantUML and Java
      run: |
        sudo apt-get update
        sudo apt-get install -y default-jre graphviz
        wget http://sourceforge.net/projects/plantuml/files/plantuml.jar/download -O plantuml.jar

    - name: Generate Class Diagram
      run: |
        # Crear directorio para diagramas
        mkdir -p docs/diagrams
        
        # Generar diagrama PlantUML desde el código C#
        ~/.dotnet/tools/puml-gen src/ docs/diagrams/class_diagram.puml -dir -public -createAssociation
        
        # Generar imagen PNG desde PlantUML
        java -jar plantuml.jar docs/diagrams/class_diagram.puml
        
        # Crear diagrama manual si el automático falla
        cat > docs/diagrams/manual_class_diagram.puml << 'EOF'
        @startuml EventTicketing_Classes
        !theme plain
        
        package "Domain" {
          class Event {
            +Id: int
            +Name: string
            +Description: string
            +Date: DateTime
            +Location: string
            +MaxCapacity: int
            +AvailableTickets: int
            +Price: decimal
          }
          
          class Ticket {
            +Id: int
            +EventId: int
            +UserId: string
            +PurchaseDate: DateTime
            +Status: TicketStatus
          }
          
          class User {
            +Id: string
            +Email: string
            +Name: string
            +CreatedAt: DateTime
          }
          
          enum TicketStatus {
            Active
            Cancelled
            Used
          }
        }
        
        package "Application" {
          interface IEventService {
            +GetAllEvents(): List<Event>
            +GetEventById(id: int): Event
            +CreateEvent(event: Event): Event
            +UpdateEvent(event: Event): Event
            +DeleteEvent(id: int): bool
          }
          
          interface ITicketService {
            +PurchaseTicket(eventId: int, userId: string): Ticket
            +GetUserTickets(userId: string): List<Ticket>
            +CancelTicket(ticketId: int): bool
          }
          
          class EventService {
            -eventRepository: IEventRepository
            +GetAllEvents(): List<Event>
            +GetEventById(id: int): Event
            +CreateEvent(event: Event): Event
            +UpdateEvent(event: Event): Event
            +DeleteEvent(id: int): bool
          }
          
          class TicketService {
            -ticketRepository: ITicketRepository
            -eventRepository: IEventRepository
            +PurchaseTicket(eventId: int, userId: string): Ticket
            +GetUserTickets(userId: string): List<Ticket>
            +CancelTicket(ticketId: int): bool
          }
        }
        
        package "Infrastructure" {
          interface IEventRepository {
            +GetAllAsync(): Task<List<Event>>
            +GetByIdAsync(id: int): Task<Event>
            +CreateAsync(event: Event): Task<Event>
            +UpdateAsync(event: Event): Task<Event>
            +DeleteAsync(id: int): Task<bool>
          }
          
          interface ITicketRepository {
            +GetByUserIdAsync(userId: string): Task<List<Ticket>>
            +CreateAsync(ticket: Ticket): Task<Ticket>
            +UpdateAsync(ticket: Ticket): Task<Ticket>
          }
          
          class EventRepository {
            -context: ApplicationDbContext
            +GetAllAsync(): Task<List<Event>>
            +GetByIdAsync(id: int): Task<Event>
            +CreateAsync(event: Event): Task<Event>
            +UpdateAsync(event: Event): Task<Event>
            +DeleteAsync(id: int): Task<bool>
          }
          
          class TicketRepository {
            -context: ApplicationDbContext
            +GetByUserIdAsync(userId: string): Task<List<Ticket>>
            +CreateAsync(ticket: Ticket): Task<Ticket>
            +UpdateAsync(ticket: Ticket): Task<Ticket>
          }
        }
        
        package "API" {
          class EventsController {
            -eventService: IEventService
            +GetEvents(): ActionResult<List<Event>>
            +GetEvent(id: int): ActionResult<Event>
            +CreateEvent(event: Event): ActionResult<Event>
            +UpdateEvent(id: int, event: Event): ActionResult
            +DeleteEvent(id: int): ActionResult
          }
          
          class TicketsController {
            -ticketService: ITicketService
            +PurchaseTicket(request: PurchaseTicketRequest): ActionResult<Ticket>
            +GetUserTickets(userId: string): ActionResult<List<Ticket>>
            +CancelTicket(id: int): ActionResult
          }
        }
        
        ' Relationships
        Event ||--o{ Ticket : "has many"
        User ||--o{ Ticket : "purchases"
        Ticket }o--|| TicketStatus : "has status"
        
        EventService ..|> IEventService : implements
        TicketService ..|> ITicketService : implements
        EventRepository ..|> IEventRepository : implements
        TicketRepository ..|> ITicketRepository : implements
        
        EventService --> IEventRepository : uses
        TicketService --> ITicketRepository : uses
        TicketService --> IEventRepository : uses
        
        EventsController --> IEventService : uses
        TicketsController --> ITicketService : uses
        
        @enduml
        EOF
        
        # Generar imagen del diagrama manual
        java -jar plantuml.jar docs/diagrams/manual_class_diagram.puml

    - name: Upload diagram artifacts
      uses: actions/upload-artifact@v4
      with:
        name: class-diagrams
        path: |
          docs/diagrams/*.png
          docs/diagrams/*.puml